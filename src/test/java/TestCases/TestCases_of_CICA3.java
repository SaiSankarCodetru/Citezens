package TestCases;

import java.time.Duration;
import org.testng.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.Test;

public class TestCases_of_CICA3 {
	Actions act;
	WebDriver driver;
	WebDriverWait wait;

	@Test
	public  void initializeDriver () throws Exception {

//		WebDriverManager.chromedriver().setup();
		ChromeOptions options = new ChromeOptions();
		options.addArguments("--allow-running-insecure-content");
		options.addArguments("--remote-allow-origins=*");
		options.addArguments("--incognito");
        options.setExperimentalOption("excludeSwitches", new String[]{"enable-automation"});
		options.setExperimentalOption("useAutomationExtension", false);
		//	options.addArguments("--headless") ;
		driver = new ChromeDriver(options);
		driver.manage().deleteAllCookies();
		driver.manage().window().maximize();
		driver.get("https://cicaamericaqa.citizensinc.com/login");
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(60));
		wait= new WebDriverWait(driver, Duration.ofSeconds(60));
		act=new Actions(driver);
		WebElement username =wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//input[@name='username']")));
		username.sendKeys("7250114");
		WebElement password=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//input[@name='password']")));
		password.sendKeys("RockStar_K8");
		WebElement submit=driver.findElement(By.xpath("//ion-button[@type='submit']"));
		submit.click();
		WebElement ApplicationModule=driver.findElement(By.id("applicationButton"));
		ApplicationModule.click();
		WebElement NewLife_Application	=driver.findElement(By.xpath("//div[@class='applicationDropdown']/div[2]"));
		NewLife_Application	.click();
		driver.findElement(By.xpath("//span[.='Step 1: Product Information']")).click();
		WebElement firstname=driver.findElement(By.xpath("//ion-input[@formcontrolname='ProposedFirstName']/input"));
		Thread.sleep(2000);
		JavascriptExecutor jse= (JavascriptExecutor)driver;
		WebElement calculate=driver.findElement(By.xpath("(//div/ion-row/ion-col/ion-button[starts-with(@class, md)])[2]"));
		act.moveToElement(calculate).build().perform();
		calculate.click();
		act.moveToElement(firstname).build().perform();
        WebElement Error_Message_FirstName =driver.findElement(By.xpath("(//ion-col[@size='24' and @size-md='8'])[1]"));
		Assert.assertTrue(Error_Message_FirstName.isDisplayed());
		String FirstNameLabelText=Error_Message_FirstName.getText();
		System.out.println(FirstNameLabelText);
		firstname.sendKeys("poiuytrewqasdfghjkmnbvcxzasdfghjkloiuytrewq");
		Assert.assertTrue(Error_Message_FirstName.isDisplayed());
		String labelErrorsMaximumCharactersFirstNameText=Error_Message_FirstName.getText();
		System.out.println(labelErrorsMaximumCharactersFirstNameText);
		Thread.sleep(1000);
		firstname.clear();
		firstname.sendKeys("David");
		WebElement Error_Message_LastName = driver.findElement(By.xpath("(//ion-col[@size='24' and @size-md='8'])[3]"));
		Assert.assertTrue(Error_Message_LastName.isDisplayed());
		String LastNameLabelText=Error_Message_LastName.getText();
		System.out.println(LastNameLabelText);
		WebElement lastname=driver.findElement(By.xpath("//ion-input[@formcontrolname='ProposedLastName']/input"));
		lastname.sendKeys("adshjsdhkdhklhfdlhflsahlkfhlksafhlkasfhlkashflkhsaflahfsl");
		Assert.assertTrue(Error_Message_LastName.isDisplayed());
		String labelErrorMaxiumCharactersLastNameText=Error_Message_LastName.getText();
		System.out.println(labelErrorMaxiumCharactersLastNameText);
		lastname.clear();
		lastname.sendKeys("Warner");
		WebElement Error_Message_State = driver.findElement(By.xpath("(//ion-col[@size='24' and @size-md='4'])[1]"));
		Assert.assertTrue(Error_Message_State.isDisplayed());
		String labelStateNameText=Error_Message_State.getText();
		System.out.println(labelStateNameText);
		WebElement stateDropDown=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//select[@formcontrolname='ProposedPhysicalState']")));
		stateDropDown.click();
		Thread.sleep(1000);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("(//option[.=' Louisiana'])[1]"))).click();
		WebElement Error_Message_Gender = driver.findElement(By.xpath("(//ion-col[@size='24' and @size-md='4' and @class='md hydrated']/following-sibling::ion-col[@size='24' and @class='md hydrated'])[1]"));
		Assert.assertTrue(Error_Message_Gender.isDisplayed());
		String labelGenderNameText=Error_Message_Gender.getText();
		System.out.println(labelGenderNameText);
		Thread.sleep(1000);
		WebElement gender=driver.findElement(By.xpath("//select[@formcontrolname='ProposedGender']"));
		Select selectgender =new Select(gender);
		selectgender.selectByVisibleText("Male");
		WebElement Error_Message_DateOfBirth = driver.findElement(By.xpath("(//ion-col[@size='24' and @size-md='4' and @class='md hydrated']/following-sibling::ion-col[@size='24' and @class='md hydrated'])[2]"));
		Assert.assertTrue(Error_Message_DateOfBirth.isDisplayed());
		String labelDateOfBirthNameText=Error_Message_DateOfBirth.getText();
		System.out.println(labelDateOfBirthNameText);
		WebElement dob=	driver.findElement(By.xpath("//input[@formcontrolname='ProposedBirthDate']"));
		Thread.sleep(1000);
		dob.sendKeys("13031999");
		WebElement Error_Message_ApplicantLocation = driver.findElement(By.xpath("(//ion-col[@size='24' and @size-md='4' and @class='md hydrated']/following-sibling::ion-col[@size='24' and @class='md hydrated'])[4]"));
		Assert.assertTrue(Error_Message_ApplicantLocation.isDisplayed());
		String labelPhysicalLocationApplicantNameText=Error_Message_ApplicantLocation.getText();
		System.out.println(labelPhysicalLocationApplicantNameText);
		WebElement signedstate=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//select[@formcontrolname='SignedState']")));
		signedstate.click();
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("(//option[.=' Alabama'])[2]"))).click();
		Thread.sleep(1000);
		WebElement Error_Message_Language = driver.findElement(By.xpath("(//ion-col[@size='24' and @size-md='4' and @class='md hydrated']/following-sibling::ion-col[@size='24' and @class='md hydrated'])[5]"));
		Assert.assertTrue(Error_Message_Language.isDisplayed());
		String labelLanguageNameText=Error_Message_Language.getText();
		System.out.println(labelLanguageNameText);
		WebElement preferredlanguage=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//select[@formcontrolname='ProposedPreferredLanguage']")));
		preferredlanguage.click();
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//option[.=' English']"))).click();
		act.moveToElement(calculate).build().perform();
		WebElement ErrorMessage_BasePlan=driver.findElement(By.xpath("//ion-col[@class = 'md hydrated' and @size-md = '7']"));
		Assert.assertTrue(ErrorMessage_BasePlan.isDisplayed());
		String labelBasePlanNameText=ErrorMessage_BasePlan.getText();
		System.out.println(labelBasePlanNameText);
		WebElement plan=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//select[@formcontrolname='Plan']")));
		plan.click();
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//option[.=' Allegiant Superior Choice Standard Issue']"))).click(); 
		WebElement ErrorMessage_FaceAmount=driver.findElement(By.xpath("//ion-col[@class = 'md hydrated' and @size-md = '3']"));
		Assert.assertTrue(ErrorMessage_FaceAmount.isDisplayed());
		String labelFaceAmountNameText=ErrorMessage_FaceAmount.getText();
		System.out.println(labelFaceAmountNameText);
		WebElement Faceamount=driver.findElement(By.xpath("//ion-input[@formcontrolname='AmountOfInsurance']/input"));
		Faceamount.click();
		Faceamount.sendKeys("Testing");
		Thread.sleep(1000);
		act.moveToElement(calculate).build().perform();
		Thread.sleep(1000);
		calculate.click();
//		WebElement ErrorFormateMessage_FaceAmount=driver.findElement(By.xpath("//ion-col[@class = 'md hydrated' and @size-md = '3']"));
		Assert.assertTrue(ErrorMessage_FaceAmount.isDisplayed());
		String labelNumberFormateFaceAmountNameText=ErrorMessage_FaceAmount.getText();
		System.out.println(labelNumberFormateFaceAmountNameText);
		Thread.sleep(1000);
		Faceamount.clear();
		Faceamount.sendKeys("30001");
		Thread.sleep(1000);
//		WebElement ErrorMaxiumAmountMessage_FaceAmount=driver.findElement(By.xpath("//ion-col[@class = 'md hydrated' and @size-md = '3']"));
		Assert.assertTrue(ErrorMessage_FaceAmount.isDisplayed());
		String labelMaxiumAmountFormateFaceAmountNameText=ErrorMessage_FaceAmount.getText();
		System.out.println(labelMaxiumAmountFormateFaceAmountNameText);
		act.scrollToElement(calculate).build().perform();
		calculate.click();
		Faceamount.clear();
		Faceamount.sendKeys("999");
		act.scrollToElement(calculate).build().perform();
		Thread.sleep(1000);
		calculate.click();
//		WebElement ErrorMinimumAmountMessage_FaceAmount=driver.findElement(By.xpath("//ion-col[@class = 'md hydrated' and @size-md = '3']"));
		Assert.assertTrue(ErrorMessage_FaceAmount.isDisplayed());
		String labelMinimumAmountFormateFaceAmountNameText=ErrorMessage_FaceAmount.getText();
		System.out.println(labelMinimumAmountFormateFaceAmountNameText);
		Faceamount.clear();
		Faceamount.sendKeys("1122");
		driver.findElement(By.xpath("//ion-label[text()='Annually']/following-sibling::ion-radio")).click();
		driver.findElement(By.xpath("//ion-label[text()='Semi-Annually']/following-sibling::ion-radio")).click();
		driver.findElement(By.xpath("//ion-label[text()='Quarterly']/following-sibling::ion-radio")).click();
		driver.findElement(By.xpath("//ion-label[text()='Monthly']/following-sibling::ion-radio")).click();
		driver.findElement(By.xpath("(//ion-label[text()='Yes']/following-sibling::ion-radio)[2]")).click();
		driver.findElement(By.xpath("(//ion-label[text()='No']/following-sibling::ion-radio)[2]")).click();
		calculate.click();
		WebElement nextstep1=driver.findElement(By.xpath("(//ion-col/ion-button[starts-with(@class, 'md button')])[5]"));
		act.moveToElement(nextstep1).build().perform();
		nextstep1.click();
		//Step-2-->>Proposed Insured Information
		driver.findElement(By.xpath("//span[normalize-space()='Step 2: Proposed Insured Information']")).click();
		Thread.sleep(1000);
		WebElement nextstep2=driver.findElement(By.xpath("(//ion-col/ion-button[starts-with(@class, 'md button')])[2]"));
		act.scrollToElement(nextstep2).build().perform();
		nextstep2.click();
		WebElement SSN_Number= driver.findElement(By.xpath("//ion-input[@formcontrolname='ProposedSSN']/input"));
		act.scrollToElement(SSN_Number).build().perform();
		WebElement ErrorSSN_NumberMessage=driver.findElement(By.xpath("//ion-col[@class = 'md hydrated' and @size-md = '14']"));
		Assert.assertTrue(ErrorSSN_NumberMessage.isDisplayed());
		String labelError_SSN_Number_NameText=ErrorSSN_NumberMessage.getText();
		System.out.println(labelError_SSN_Number_NameText);
		SSN_Number.sendKeys("abcdefghijklmnopqrstuvwxyz");
//		WebElement ErrorSSN_AlphaBetMessage=driver.findElement(By.xpath("//ion-col[@class = 'md hydrated' and @size-md = '14']"));
		Assert.assertTrue(ErrorSSN_NumberMessage.isDisplayed());
		String labelErrorAlphabet_SSN_Number_NameText=ErrorSSN_NumberMessage.getText();
		System.out.println(labelErrorAlphabet_SSN_Number_NameText);
		SSN_Number.clear();
		SSN_Number.sendKeys("254784511");
//		WebElement ErrorSSN_MaximumMessage=driver.findElement(By.xpath("//ion-col[@class = 'md hydrated' and @size-md = '14']"));
		Assert.assertTrue(ErrorSSN_NumberMessage.isDisplayed());
		String labelErrorMaximum_SSN_Number_NameText=ErrorSSN_NumberMessage.getText();
		System.out.println(labelErrorMaximum_SSN_Number_NameText);
		SSN_Number.clear();
		SSN_Number.sendKeys("1234asasa");
		Assert.assertTrue(ErrorSSN_NumberMessage.isDisplayed());
		String labelErrorSSN_Format_NameText=ErrorSSN_NumberMessage.getText();
		System.out.println(labelErrorSSN_Format_NameText);
		Thread.sleep(1000);
		SSN_Number.clear();
		SSN_Number.sendKeys("254798741");
		WebElement zipCode =driver.findElement(By.xpath("//ion-input[@formcontrolname='ProposedPhysicalZipCode']/input"));
		act.scrollToElement(zipCode).build().perform();
		//WebElement Error_EmailAddressMessage=driver.findElement(By.xpath("(//ion-col[@class = 'md hydrated' and @size-md = '8' and @size='24'])[3]"));
		WebElement Error_EmailAddressMessage=driver.findElement(By.xpath("(//h3[text() = 'Contact Information']/following-sibling::ion-row//ion-col[@size-md = '8'])[1]"));
		Assert.assertTrue(Error_EmailAddressMessage.isDisplayed());
		String labelErrorEmailAddressNameText=Error_EmailAddressMessage.getText();
		System.out.println(labelErrorEmailAddressNameText);
		
		WebElement EmailAddress=driver.findElement(By.xpath("//ion-input[@formcontrolname='ProposedEmailAddress']/input"));
		EmailAddress.sendKeys("destiny");
		WebElement Error_EmailCorrectFormatMessage=driver.findElement(By.xpath("(//h3[text() = 'Contact Information']/following-sibling::ion-row//ion-col[@size-md = '8'])[1]"));
		Assert.assertTrue(Error_EmailCorrectFormatMessage.isDisplayed());
		String labelErrorEmailCorrectFormatNameText=Error_EmailCorrectFormatMessage.getText();
		System.out.println(labelErrorEmailCorrectFormatNameText);
		EmailAddress.clear();
		EmailAddress.sendKeys("destinysdfghdfghdfsgdsfgsdfgdfghdfghdsfghjdsfghdfghdfghfgh");
		Assert.assertTrue(Error_EmailCorrectFormatMessage.isDisplayed());
		String labelErrorMaximum_EmailNameText=Error_EmailCorrectFormatMessage.getText();
		System.out.println(labelErrorMaximum_EmailNameText);
		EmailAddress.clear();
		EmailAddress.sendKeys("destiny@none.com");
		WebElement Error_PhoneNumberMessage=driver.findElement(By.xpath("(//h3[text() = 'Contact Information']/following-sibling::ion-row//ion-col[@size-md = '8'])[2]"));
		Assert.assertTrue(Error_PhoneNumberMessage.isDisplayed());
		String labelErrorPhoneNumbeNameText=Error_PhoneNumberMessage.getText();
		System.out.println(labelErrorPhoneNumbeNameText);
		WebElement phoneNumber=driver.findElement(By.xpath("//ion-input[@formcontrolname='ProposedMobilePhone']/input"));
		phoneNumber	.sendKeys("abc");
//		WebElement Error_PhoneNumberCorrectFormatMessage=driver.findElement(By.xpath("(//h3[text() = 'Contact Information']/following-sibling::ion-row//ion-col[@size-md = '8'])[2]"));
		Assert.assertTrue(Error_PhoneNumberMessage.isDisplayed());
		String labelErrorPhoneNUmberCorrectFormatNameText=Error_PhoneNumberMessage.getText();
		System.out.println(labelErrorPhoneNUmberCorrectFormatNameText);
		phoneNumber.clear();
		phoneNumber	.sendKeys("12548152251");
		Assert.assertTrue(Error_PhoneNumberMessage.isDisplayed());
		String labelError_MaximumPhoneNUmberNameText=Error_PhoneNumberMessage.getText();
		System.out.println(labelError_MaximumPhoneNUmberNameText);
		phoneNumber.clear();
		phoneNumber.sendKeys("1254815225");
		WebElement Error_Address_1_Message=driver.findElement(By.xpath("(//ion-col[@class = 'md hydrated' and @size-md = '24'])[1]"));
		Assert.assertTrue(Error_Address_1_Message.isDisplayed());
		String labelErrorAddressNameText=Error_Address_1_Message.getText();
		System.out.println(labelErrorAddressNameText);
		WebElement Address_1_Message=driver.findElement(By.xpath("//ion-input[@formcontrolname='ProposedPhysicalAddress1']/input"));
		Address_1_Message.sendKeys("280 SIERRA DR. APT. B407 1142 SW ARLINGTON BLVD 1142 SW ARLINGTON BLVD");
		Assert.assertTrue(Error_Address_1_Message.isDisplayed());
		String labelErrorMaxmium_AddressNameText=Error_Address_1_Message.getText();
		System.out.println(labelErrorMaxmium_AddressNameText);
		Address_1_Message.clear();
		Address_1_Message.sendKeys("7412 PINNACLE POINT\r\n"
				+ "");
		WebElement Address_2_Message=driver.findElement(By.xpath("//ion-input[@formcontrolname='ProposedPhysicalAddress2']/input"));
		Address_2_Message.sendKeys("280 SIERRA DR. APT. B407 1142 SW ARLINGTON BLVD 1142 SW ARLINGTON BLVD");
		WebElement Error_Address_2_Message=driver.findElement(By.xpath("(//ion-col[@class = 'md hydrated' and @size-md = '24'])[2]"));
		Assert.assertTrue(Error_Address_2_Message.isDisplayed());
		String labelErrorAddress_2_NameText=Error_Address_2_Message.getText();
		System.out.println(labelErrorAddress_2_NameText);
		Address_2_Message.clear();
		Address_2_Message.sendKeys("668 WOODSIDE DR");
		WebElement Error_ZipCode_Message=driver.findElement(By.xpath("(//ion-col[@class = 'md hydrated' and @size-md = '7'])[1]"));
		Assert.assertTrue(Error_ZipCode_Message.isDisplayed());
		String labelErrorZipCode_NameText=Error_ZipCode_Message.getText();
		System.out.println(labelErrorZipCode_NameText);
		WebElement ZipCode =driver.findElement(By.xpath("//ion-input[@formcontrolname='ProposedPhysicalZipCode']/input"));
		ZipCode.sendKeys("1234");
		Assert.assertTrue(Error_ZipCode_Message.isDisplayed());
		String labelError_MinimumZipCode_NameText=Error_ZipCode_Message.getText();
		System.out.println(labelError_MinimumZipCode_NameText);
		zipCode.clear();
		zipCode.sendKeys("123456");
		Assert.assertTrue(Error_ZipCode_Message.isDisplayed());
		String labelError_MaximumZipCode_NameText=Error_ZipCode_Message.getText();
		System.out.println(labelError_MaximumZipCode_NameText);
		zipCode.clear();
		zipCode.sendKeys("67801");
		driver.findElement(By.xpath("//ion-input[@formcontrolname='ProposedPhysicalZipCode']/following-sibling::ion-button")).click();
		
		act.moveToElement(nextstep2).build().perform();
		nextstep2.click();
		WebElement Error_City_Message=driver.findElement(By.xpath("(//ion-col[@class = 'md hydrated' and @size-md = '10'])[1]"));
		Assert.assertTrue(Error_City_Message.isDisplayed());
		String labelErrorCity_NameText=Error_City_Message.getText();
		System.out.println(labelErrorCity_NameText);
		
		WebElement city=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//select[@formcontrolname='ProposedPhysicalCity']")));
		city.click();
		WebElement CitySelection=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//option[.='Dodge City ']")));
		Thread.sleep(1000);
		CitySelection.click();
//		act.scrollToElement(nextstep2).build().perform();
		nextstep2.click();
		Thread.sleep(1000);
		//Step-3-->>Policy Owner Information
		Thread.sleep(1000);
		WebElement nextstep3=wait.until(ExpectedConditions.elementToBeClickable(By.xpath("(//ion-row/ion-col/ion-button[starts-with(@class, 'md button')])[8]")));
		nextstep3.click();
		WebElement Error_ProposedOWner_Message=driver.findElement(By.xpath("//form[@class='ng-untouched ng-pristine ng-invalid']//div[@class='block-info-app']"));
		Assert.assertTrue(Error_ProposedOWner_Message.isDisplayed());
		String labelErrorProposedOwnerInfo_NameText=Error_ProposedOWner_Message.getText();
		System.out.println(labelErrorProposedOwnerInfo_NameText);
		WebElement step3_Yes=driver.findElement(By.xpath("//ion-item/ion-label[.='Yes']/following-sibling::ion-radio[@role='radio']"));
		step3_Yes.click();
		WebElement step3_No=driver.findElement(By.xpath("//ion-item/ion-label[.='No']/following-sibling::ion-radio[@role='radio']"));
		Thread.sleep(1000);
		step3_No.click();
		Thread.sleep(1000);
		nextstep3.click();
		//Step-4-->> Beneficiary information
		Thread.sleep(2000);
//		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//option[.=' Allegiant Superior Choice Standard Issue']"))).click();
		WebElement nextstep4= driver.findElement(By.xpath("(//ion-row[@style='padding-left: 50px;']/ion-col[@class='md hydrated']/ion-button[starts-with(@class, md)])[3]"));
		act.scrollToElement(nextstep4).build().perform();
		nextstep4.click();
		WebElement BenificiaryFirstname=driver.findElement(By.xpath("//ion-input[@formcontrolname='BeneficiaryFirstName']/input"));
		act.scrollToElement(BenificiaryFirstname).build().perform();
		WebElement Error_BenificicartFirstName_Message=driver.findElement(By.xpath("(//ion-col[@class = 'md hydrated' and @size-md = '8' and @size='24'])[6]"));
		Assert.assertTrue(Error_BenificicartFirstName_Message.isDisplayed());
		String labelErrorBenificiaryFirstName_NameText=Error_BenificicartFirstName_Message.getText();
		System.out.println(labelErrorBenificiaryFirstName_NameText);
		BenificiaryFirstname.sendKeys("sdfsadfgdfsfghfghxfghjdsfghdfghdfghjdfsghdsfghretyu");
		Assert.assertTrue(Error_BenificicartFirstName_Message.isDisplayed());
		String labelErrorMaximumBenificiaryFirstName_NameText=Error_BenificicartFirstName_Message.getText();
		System.out.println(labelErrorMaximumBenificiaryFirstName_NameText);
		BenificiaryFirstname.clear();
		BenificiaryFirstname.sendKeys("Ludie Cormier");
		WebElement BenificiaryMiddlename=driver.findElement(By.xpath("//ion-input[@formcontrolname='BeneficiaryMiddleName']/input"));
		BenificiaryMiddlename.sendKeys("sdfsadfgdfsfghfghxfghjdsfghdfghdfghjdfsghdsfghretyu");
		WebElement Error_BenificicartMiddleName_Message=driver.findElement(By.xpath("(//ion-col[@class = 'md hydrated' and @size-md = '8' and @size='24'])[7]"));
		Assert.assertTrue(Error_BenificicartMiddleName_Message.isDisplayed());
		String labelErrorBenificiaryMiddleName_NameText=Error_BenificicartMiddleName_Message.getText();
		System.out.println(labelErrorBenificiaryMiddleName_NameText);
		BenificiaryMiddlename.clear();
		BenificiaryMiddlename.sendKeys("Testing");
		WebElement Error_BenificicaryLastName_Message=driver.findElement(By.xpath("(//ion-col[@class = 'md hydrated' and @size-md = '8' and @size='24'])[8]"));
		Assert.assertTrue(Error_BenificicaryLastName_Message.isDisplayed());
		String labelErrorBenificiaryLastName_NameText=Error_BenificicaryLastName_Message.getText();
		System.out.println(labelErrorBenificiaryLastName_NameText);
		WebElement BenificiaryLastname=driver.findElement(By.xpath("//ion-input[@formcontrolname='BeneficiaryLastName']/input"));
		BenificiaryLastname.sendKeys("sdfsadfgdfsfghfghxfghjdsfghdfghdfghjdfsghdsfghretyu");
		Assert.assertTrue(Error_BenificicaryLastName_Message.isDisplayed());
		String labelErrorMaximumBenificiaryLastName_NameText=Error_BenificicaryLastName_Message.getText();
		System.out.println(labelErrorMaximumBenificiaryLastName_NameText);
		BenificiaryLastname.clear();
		BenificiaryLastname.sendKeys("Ludie Cormier");
		WebElement Error_BenificicaryAddress_1_Message=driver.findElement(By.xpath("(//ion-col[@class = 'md hydrated' and @size-md = '24' and @size='24'])[4]"));
		Assert.assertTrue(Error_BenificicaryAddress_1_Message.isDisplayed());
		String labelErrorBenificiaryAddress_1_NameText=Error_BenificicaryAddress_1_Message.getText();
		System.out.println(labelErrorBenificiaryAddress_1_NameText);
		WebElement BenificiaryAddress_1=driver.findElement(By.xpath("//ion-input[@formcontrolname='BeneficiaryAddress1']/input"));
		BenificiaryAddress_1.sendKeys("913 Alena Lakes Suite 843 35311 Kub Extensions Apt.Lakes Suite 843 ");
		Assert.assertTrue(Error_BenificicaryAddress_1_Message.isDisplayed());
		String labelErrorMaximumBenificiaryAddress_1_NameText=Error_BenificicaryAddress_1_Message.getText();
		System.out.println(labelErrorMaximumBenificiaryAddress_1_NameText);
		BenificiaryAddress_1.clear();
		BenificiaryAddress_1.sendKeys("31120 Thurman Course Suite 255");
		WebElement BenificiaryAddress_2=driver.findElement(By.xpath("//ion-input[@formcontrolname='BeneficiaryAddress2']/input"));
		BenificiaryAddress_2.sendKeys("913 Alena Lakes Suite 843 35311 Kub Extensions Apt.Lakes Suite 843 ");
		WebElement Error_MaximumBenificiaryAddress_2_Message=driver.findElement(By.xpath("(//ion-col[@class = 'md hydrated' and @size-md = '24' and @size='24'])[5]"));
		Assert.assertTrue(Error_MaximumBenificiaryAddress_2_Message.isDisplayed());
		String labelErrorMAximumBenificiaryAddress_2_NameText=Error_MaximumBenificiaryAddress_2_Message.getText();
		System.out.println(labelErrorMAximumBenificiaryAddress_2_NameText);
		BenificiaryAddress_2.clear();
		BenificiaryAddress_2.sendKeys("913 Alena Lakes Suite 843");
		WebElement AddBenificiary=driver.findElement(By.xpath("//ion-button[normalize-space()='Add Beneficiary']"));
		act.scrollToElement(AddBenificiary).build().perform();
		Thread.sleep(1000);
		WebElement Error_BenificicaryCity_Message=driver.findElement(By.xpath("(//ion-col[@class = 'md hydrated' and @size-md = '10' and @size='24'])[2]"));
		Assert.assertTrue(Error_BenificicaryCity_Message.isDisplayed());
		String labelErrorBenificiaryCity_NameText=Error_BenificicaryCity_Message.getText();
		System.out.println(labelErrorBenificiaryCity_NameText);
		WebElement BenificiaryCity =driver.findElement(By.xpath("//ion-input[@formcontrolname='BeneficiaryCity']/input"));
		BenificiaryCity.sendKeys("asdfghdfsghjsardghjdsfghjsdfghjdfghj");
		Assert.assertTrue(Error_BenificicaryCity_Message.isDisplayed());
		String labelErrorMaximumBenificiaryCity_NameText=Error_BenificicaryCity_Message.getText();
		System.out.println(labelErrorMaximumBenificiaryCity_NameText);
		BenificiaryCity.clear();
		BenificiaryCity.sendKeys("Springfield");
		WebElement Error_BenificicaryState_Message=driver.findElement(By.xpath("(//ion-col[@class = 'md hydrated' and @size-md = '7' and @size='24'])[4]"));
		Assert.assertTrue(Error_BenificicaryState_Message.isDisplayed());
		String labelErrorBenificiaryState_NameText=Error_BenificicaryState_Message.getText();
		System.out.println(labelErrorBenificiaryState_NameText);
		WebElement benificiaryState=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//select[@formcontrolname='BeneficiaryState']")));
		benificiaryState.click();
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("(//option[.=' Arizona'])[2]"))).click();
		WebElement Error_BenificicaryZipCode_Message=driver.findElement(By.xpath("(//ion-col[@class = 'md hydrated' and @size-md = '7' and @size='24'])[5]"));
		Assert.assertTrue(Error_BenificicaryZipCode_Message.isDisplayed());
		String labelErrorBenificiaryZipCode_NameText=Error_BenificicaryZipCode_Message.getText();
		System.out.println(labelErrorBenificiaryZipCode_NameText);
		WebElement benificiaryZipcode =driver.findElement(By.xpath("//ion-input[@formcontrolname='BeneficiaryZipCode']/input"));
		benificiaryZipcode.sendKeys("345");
		Assert.assertTrue(Error_BenificicaryZipCode_Message.isDisplayed());
		String labelErrorMinimumBenificiaryZipCode_NameText=Error_BenificicaryZipCode_Message.getText();
		System.out.println(labelErrorMinimumBenificiaryZipCode_NameText);
		benificiaryZipcode.clear();
		benificiaryZipcode.sendKeys("3453456");
		Assert.assertTrue(Error_BenificicaryZipCode_Message.isDisplayed());
		String labelErrorMaximumBenificiaryZipCode_NameText=Error_BenificicaryZipCode_Message.getText();
		System.out.println(labelErrorMaximumBenificiaryZipCode_NameText);
		benificiaryZipcode.clear();
		benificiaryZipcode.sendKeys("67801");
		Thread.sleep(1000);
		WebElement benificiaryEmailAddress =driver.findElement(By.xpath("//ion-input[@formcontrolname='BeneficiaryEmailAddress']/input"));
		benificiaryEmailAddress.sendKeys("asdsaf");
		WebElement Error_Message_BenificiaryEmailAddress =driver.findElement(By.xpath("(//div[@formarrayname= 'BeneficiaryInformation']//ion-row[7]/ion-col[@class='md hydrated' and @size='24'])[1]"));
//		WebElement ErrorMessage_BenificiaryEmail=(WebElement) jse.executeScript ("return arguments[0];", Error_Message_BenificiaryEmailAddress);
		Assert.assertTrue(Error_Message_BenificiaryEmailAddress.isDisplayed());
		String LabelErrorBenificaryEmailCorrectFormatText=Error_Message_BenificiaryEmailAddress.getText();
		System.out.println(LabelErrorBenificaryEmailCorrectFormatText);
		benificiaryEmailAddress.clear();
		benificiaryEmailAddress.sendKeys("asdfgfdsgdsafgfsdfsgsdfgdfsgdhdfsghdfghfdghfdghfdgdsfgdfghdsfghdfsghdfgh");
//		benificiaryEmailAddress.clear();
		Assert.assertTrue(Error_Message_BenificiaryEmailAddress.isDisplayed());
		String LabelErrorMAximumBenificaryEmailText=Error_Message_BenificiaryEmailAddress.getText();
		System.out.println(LabelErrorMAximumBenificaryEmailText);
		benificiaryEmailAddress.clear();
		benificiaryEmailAddress.sendKeys("none@one.com");
		WebElement benificiaryPhone =driver.findElement(By.xpath("//ion-input[@formcontrolname= 'BeneficiaryPhone']/input"));
		benificiaryPhone.sendKeys("124");
		WebElement Error_Message_MinimumBenificiaryPhone =driver.findElement(By.xpath("(//div[@formarrayname= 'BeneficiaryInformation']//ion-row[7]/ion-col[@class='md hydrated' and @size='24'])[2]"));
//		WebElement ErrorMessage_BenificiaryEmail=(WebElement) jse.executeScript ("return arguments[0];", Error_Message_BenificiaryEmailAddress);
		Assert.assertTrue(Error_Message_MinimumBenificiaryPhone.isDisplayed());
		String LabelErrorMinimumBenificaryPhonelText=Error_Message_MinimumBenificiaryPhone.getText();
		System.out.println(LabelErrorMinimumBenificaryPhonelText);
		benificiaryPhone.clear();
		benificiaryPhone.sendKeys("12487451245871");
		Assert.assertTrue(Error_Message_MinimumBenificiaryPhone.isDisplayed());
		String LabelErrorMaximumBenificaryPhoneText=Error_Message_MinimumBenificiaryPhone.getText();
		System.out.println(LabelErrorMaximumBenificaryPhoneText);
		benificiaryPhone.clear();
		benificiaryPhone.sendKeys("1254874512");
		WebElement Error_Message_MinimumBenificiarySSN =driver.findElement(By.xpath("(//div[@formarrayname= 'BeneficiaryInformation']//ion-row[7]/ion-col[@class='md hydrated' and @size='24'])[3]"));
		Assert.assertTrue(Error_Message_MinimumBenificiarySSN.isDisplayed());
		String LabelErrorBenificarySSNText=Error_Message_MinimumBenificiarySSN.getText();
		System.out.println(LabelErrorBenificarySSNText);
		WebElement BenificiarySSN=driver.findElement(By.xpath("//ion-input[@formcontrolname='BeneficiarySSN']/input"));
		BenificiarySSN.sendKeys("12345");
		Assert.assertTrue(Error_Message_MinimumBenificiarySSN.isDisplayed());
		String LabelErrorMinimumBenificarySSNText=Error_Message_MinimumBenificiarySSN.getText();
		System.out.println(LabelErrorMinimumBenificarySSNText);
		BenificiarySSN.clear();
		BenificiarySSN.sendKeys("123455874512");
		Assert.assertTrue(Error_Message_MinimumBenificiarySSN.isDisplayed());
		String LabelErrorMaximumBenificarySSNText=Error_Message_MinimumBenificiarySSN.getText();
		System.out.println(LabelErrorMaximumBenificarySSNText);
		BenificiarySSN.clear();
		BenificiarySSN.sendKeys("345845123");
		WebElement Error_Message_BenificiaryDOB =driver.findElement(By.xpath("(//div[@formarrayname= 'BeneficiaryInformation']//ion-row[7]/ion-col[@class='md hydrated' and @size='24'])[4]"));
		Assert.assertTrue(Error_Message_BenificiaryDOB.isDisplayed());
		String LabelErrorBenificaryDOBText=Error_Message_BenificiaryDOB.getText();
		System.out.println(LabelErrorBenificaryDOBText);
		WebElement BenificiaryDOB=driver.findElement(By.xpath("//input[@formcontrolname='BeneficiaryBirthDate']"));
		BenificiaryDOB.sendKeys("01011974");
		WebElement Error_Message_BenificiaryPercent =driver.findElement(By.xpath("(//div[@formarrayname= 'BeneficiaryInformation']//ion-row[8]/ion-col[@class='md hydrated' and @size='24'])[1]"));
		Assert.assertTrue(Error_Message_BenificiaryPercent.isDisplayed());
		String LabelErrorBenificaryPercentText=Error_Message_BenificiaryPercent.getText();
		System.out.println(LabelErrorBenificaryPercentText);
		WebElement BenificiaryPercent=driver.findElement(By.xpath("//ion-input[@formcontrolname='BeneficiaryPercent']/input"));
		BenificiaryPercent.sendKeys("120");
		WebElement benificiaryMaxPercentError =driver.findElement(By.xpath("//p[normalize-space()='Primary Beneficiaries must equal 100']"));
		Assert.assertTrue(benificiaryMaxPercentError.isDisplayed());
		String LabelErrorMaximumBenificaryPercentText=benificiaryMaxPercentError.getText();
		System.out.println(LabelErrorMaximumBenificaryPercentText);
		BenificiaryPercent.clear();
		BenificiaryPercent.sendKeys("100");
		WebElement Error_Message_BenificiaryRelationShip =driver.findElement(By.xpath("(//div[@formarrayname= 'BeneficiaryInformation']//ion-row[8]/ion-col[@class='md hydrated' and @size='24'])[2]"));
		Assert.assertTrue(Error_Message_BenificiaryRelationShip.isDisplayed());
		String LabelErrorBenificaryRelationText=Error_Message_BenificiaryRelationShip.getText();
		System.out.println(LabelErrorBenificaryRelationText);
		WebElement Benificiaryrelation=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//select[@formcontrolname='BeneficiaryRelation']")));
		Benificiaryrelation.click();
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//option[.=' Other']"))).click();
		Benificiaryrelation.click();
		WebElement error_Message_BenificiaryRelationShipForElementOthers =driver.findElement(By.xpath("(//div[@formarrayname= 'BeneficiaryInformation']//ion-row[8]/ion-col[@class='md hydrated' and @size='24'])[3]"));
		Assert.assertTrue(error_Message_BenificiaryRelationShipForElementOthers.isDisplayed());
		String LabelErrorBenificaryOthersText=error_Message_BenificiaryRelationShipForElementOthers.getText();
		System.out.println(LabelErrorBenificaryOthersText);
		WebElement benificiaryOthersRelationsship =driver.findElement(By.xpath("//ion-input[@formcontrolname='BeneficiaryOtherExplain']/input"));
		benificiaryOthersRelationsship.sendKeys("Others");
		Thread.sleep(1000);
		act.moveToElement(nextstep4).build().perform();
		nextstep4.click();
		Thread.sleep(2000);
		//step5-->>Existing Insurance
		WebElement nextstep5=driver.findElement(By.xpath("(//ion-row[@style='padding-left: 50px;']/ion-col[@class='md hydrated']/ion-button[starts-with(@class, md)])[4]"));
		Thread.sleep(1000);
		nextstep5.click();
		Thread.sleep(1000);
		WebElement error_Message_ExistingInsurQuest_1 =driver.findElement(By.xpath("(//h3[text()='Existing Insurance']/following-sibling::ion-row[@class='md hydrated'])[1]"));
		Assert.assertTrue(error_Message_ExistingInsurQuest_1.isDisplayed());
		String LabelErrorQuestions_1_Text=error_Message_ExistingInsurQuest_1.getText();
		System.out.println(LabelErrorQuestions_1_Text);
		WebElement error_Message_ExistingInsurQuest_2 =driver.findElement(By.xpath("(//h3[text()='Existing Insurance']/following-sibling::ion-row[@class='md hydrated'])[2]"));
		Assert.assertTrue(error_Message_ExistingInsurQuest_2.isDisplayed());
		String LabelErrorQuestions_2_Text=error_Message_ExistingInsurQuest_2.getText();
		System.out.println(LabelErrorQuestions_2_Text);
		WebElement ExitingInsurance_Question_1=driver.findElement(By.xpath("(//ion-label[text()='No ']/following-sibling::ion-radio[@slot='start'])[1]"));
		ExitingInsurance_Question_1.click();
		nextstep5.click();
		Thread.sleep(2000);
//		************************************************************************************************
//		//Step6-->>Health questions
		WebElement nextstep6=driver.findElement(By.xpath("(//ion-row[@style='padding-left: 50px;']/ion-col[@class='md hydrated']/ion-button[starts-with(@class, md)])[5]"));
		act.moveToElement(nextstep6).build().perform();
		nextstep6.click();
		WebElement Error_HealthQuestions_1=driver.findElement(By.xpath("//div[@class='block-info-app' and @style='margin-top: 20px; margin-bottom: 20px;' ]/div[1]/ion-row/ion-col[@class='md hydrated']"));
		act.scrollToElement(Error_HealthQuestions_1).build().perform();
		Assert.assertTrue(Error_HealthQuestions_1.isDisplayed());
		String LabelErrorHealthQuestions_1_Text=Error_HealthQuestions_1.getText();
		System.out.println(LabelErrorHealthQuestions_1_Text);
		WebElement Error_HealthQuestions_2=driver.findElement(By.xpath("//div[@class='block-info-app' and @style='margin-top: 20px; margin-bottom: 20px;' ]/div[2]/ion-row/ion-col[@class='md hydrated']"));
		act.scrollToElement(Error_HealthQuestions_2).build().perform();
		Assert.assertTrue(Error_HealthQuestions_2.isDisplayed());
		String LabelErrorHealthQuestions_2_Text=Error_HealthQuestions_2.getText();
		System.out.println(LabelErrorHealthQuestions_2_Text);
		WebElement Error_HealthQuestions_3=driver.findElement(By.xpath("//div[@class='block-info-app' and @style='margin-top: 20px; margin-bottom: 20px;' ]/div[3]/ion-row/ion-col[@class='md hydrated']"));
		WebElement Error_HealthQuestions_4=driver.findElement(By.xpath("//div[@class='block-info-app' and @style='margin-top: 20px; margin-bottom: 20px;' ]/div[4]/ion-row/ion-col[@class='md hydrated']"));

		act.scrollToElement(Error_HealthQuestions_4).build().perform();
		Assert.assertTrue(Error_HealthQuestions_3.isDisplayed());
		String LabelErrorHealthQuestions_3_Text=Error_HealthQuestions_3.getText();
		System.out.println(LabelErrorHealthQuestions_3_Text);
		Thread.sleep(1000);
//		WebElement Error_HealthQuestions_4=driver.findElement(By.xpath("//div[@class='block-info-app' and @style='margin-top: 20px; margin-bottom: 20px;' ]/div[4]/ion-row/ion-col[@class='md hydrated']"));
		act.scrollToElement(Error_HealthQuestions_4).build().perform();
		Assert.assertTrue(Error_HealthQuestions_4.isDisplayed());
		String LabelErrorHealthQuestions_4_Text=Error_HealthQuestions_4.getText();
		System.out.println(LabelErrorHealthQuestions_4_Text);
		WebElement Error_HealthQuestions_5=driver.findElement(By.xpath("//div[@class='block-info-app' and @style='margin-top: 20px; margin-bottom: 20px;' ]/div[5]/ion-row/ion-col[@class='md hydrated']"));
		act.scrollToElement(Error_HealthQuestions_5).build().perform();
		Assert.assertTrue(Error_HealthQuestions_5.isDisplayed());
		String LabelErrorHealthQuestions_5_Text=Error_HealthQuestions_5.getText();
		System.out.println(LabelErrorHealthQuestions_5_Text);
		WebElement Error_HealthQuestions_6=driver.findElement(By.xpath("//div[@class='block-info-app' and @style='margin-top: 20px; margin-bottom: 20px;' ]/div[6]/ion-row/ion-col[@class='md hydrated']"));
		act.scrollToElement(Error_HealthQuestions_6).build().perform();
		Assert.assertTrue(Error_HealthQuestions_6.isDisplayed());
		String LabelErrorHealthQuestions_6_Text=Error_HealthQuestions_6.getText();
		System.out.println(LabelErrorHealthQuestions_6_Text);
		WebElement Error_HealthQuestions_7=driver.findElement(By.xpath("//div[@class='block-info-app' and @style='margin-top: 20px; margin-bottom: 20px;' ]/div[7]/ion-row/ion-col[@class='md hydrated']"));
		WebElement Error_HealthQuestions_8=driver.findElement(By.xpath("//div[@class='block-info-app' and @style='margin-top: 20px; margin-bottom: 20px;' ]/div[8]/ion-row/ion-col[@class='md hydrated']"));

		act.scrollToElement(Error_HealthQuestions_8).build().perform();
		Assert.assertTrue(Error_HealthQuestions_7.isDisplayed());
		String LabelErrorHealthQuestions_7_Text=Error_HealthQuestions_7.getText();
		System.out.println(LabelErrorHealthQuestions_7_Text);
		Thread.sleep(1000);
		act.scrollToElement(Error_HealthQuestions_8).build().perform();
		Assert.assertTrue(Error_HealthQuestions_8.isDisplayed());
		String LabelErrorHealthQuestions_8_Text=Error_HealthQuestions_8.getText();
		System.out.println(LabelErrorHealthQuestions_8_Text);
		act.scrollToElement(Error_HealthQuestions_1).build().perform();
		WebElement HealthQuestions1=driver.findElement(By.xpath("(//ion-item/ion-label[.='No']/following-sibling::ion-radio)[3]"));
		HealthQuestions1.click();
		WebElement HealthQuestions2=driver.findElement(By.xpath("(//ion-item/ion-label[.='No']/following-sibling::ion-radio)[4]"));
		HealthQuestions2.click();
		WebElement HealthQuestions3=driver.findElement(By.xpath("(//ion-item/ion-label[.='No']/following-sibling::ion-radio)[5]"));
		act.scrollToElement(HealthQuestions3).build().perform();
		HealthQuestions3.click();
		WebElement no_physician= driver.findElement(By.xpath("//ion-checkbox[@formcontrolname='PhysicianNameCheckbox']"));
		act.scrollToElement(no_physician).build().perform();
		WebElement HealthQuestions4=driver.findElement(By.xpath("(//ion-item/ion-label[.='No']/following-sibling::ion-radio)[6]"));
		act.scrollToElement(HealthQuestions4).build().perform();
		HealthQuestions4.click();
		WebElement HealthQuestions5=driver.findElement(By.xpath("(//ion-item/ion-label[.='No']/following-sibling::ion-radio)[7]"));
		act.scrollToElement(HealthQuestions5).build().perform();
		HealthQuestions5.click();
		WebElement HealthQuestions6=driver.findElement(By.xpath("(//ion-item/ion-label[.='No']/following-sibling::ion-radio)[8]"));
		act.scrollToElement(HealthQuestions6).build().perform();
		HealthQuestions6.click();
		WebElement HealthQuestions7=driver.findElement(By.xpath("(//ion-item/ion-label[.='No']/following-sibling::ion-radio)[9]"));
		act.scrollToElement(HealthQuestions7).build().perform();
		HealthQuestions7.click();
		WebElement HealthQuestions8=driver.findElement(By.xpath("(//ion-item/ion-label[.='No']/following-sibling::ion-radio)[10]"));
		act.scrollToElement(HealthQuestions8).build().perform();
		HealthQuestions8.click();
		WebElement HealthQuestions8_yes=driver.findElement(By.xpath("(//ion-item/ion-label[.='Yes']/following-sibling::ion-radio)[10]"));
		act.scrollToElement(nextstep6).build().perform();
		HealthQuestions8_yes.click();
		act.moveToElement(nextstep6).build().perform();
		
		no_physician.click();
		act.moveToElement(nextstep6).build().perform();
		Thread.sleep(3000);
		nextstep6.click();
		Thread.sleep(2000);
		WebElement okbutton_Step_6	=driver.findElement(By.xpath("//span[text()='Ok']"));
		okbutton_Step_6	.click();
//		**************for other flow******************************
		WebElement tableOFContent =driver.findElement(By.xpath("(//ion-col[@size='24' and @size-md='18']/ion-button[@class='md button button-solid ion-activatable ion-focusable hydrated'])[9]"));
		tableOFContent.click();
		Thread.sleep(1000);
		WebElement Step_1_productInfo=driver.findElement(By.xpath("//span[text()='Step 1: Product Information']"));
		Step_1_productInfo.click();
		Thread.sleep(1000);
		WebElement calculate1=driver.findElement(By.xpath("(//div/ion-row/ion-col/ion-button[starts-with(@class, md)])[2]"));
		act.scrollToElement(calculate1).build().perform();
		Thread.sleep(1000);
		calculate1.click();
		WebElement nextstep1_Again=driver.findElement(By.xpath("(//ion-col/ion-button[starts-with(@class, 'md button')])[5]"));
		act.scrollToElement(nextstep1_Again).build().perform();
		nextstep1_Again.click();
		Thread.sleep(2000);
		WebElement Step_6_predeterminationQues=driver.findElement(By.xpath("//span[text()='Step 6: Predetermination Questions']"));
		Step_6_predeterminationQues.click();
		Thread.sleep(1000);
		WebElement nextstep6_Again=driver.findElement(By.xpath("(//ion-row[@style='padding-left: 50px;']/ion-col[@class='md hydrated']/ion-button[starts-with(@class, md)])"));
		act.scrollToElement(nextstep6_Again).build().perform();
		nextstep6_Again.click();
		Thread.sleep(2000);
		WebElement okbutton_Step_6_Again	=driver.findElement(By.xpath("//span[text()='Ok']"));
		okbutton_Step_6_Again.click();
		Thread.sleep(1000);
		WebElement plan_Again=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//select[@formcontrolname='Plan']")));
		WebElement calculate1_Again=driver.findElement(By.xpath("(//div/ion-row/ion-col/ion-button[starts-with(@class, md)])[2]"));
		act.scrollToElement(calculate1_Again).build().perform();
//		act.scrollToElement(plan_Again).build().perform();
		plan_Again.click();
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//option[.=' Allegiant Superior Choice Guarantee Issue']"))).click(); 
		Thread.sleep(1000);
		act.scrollToElement(calculate1_Again).build().perform();
		Thread.sleep(1000);
		calculate1_Again.click();
		WebElement nextstep1_Again_Again=driver.findElement(By.xpath("(//ion-col/ion-button[starts-with(@class, 'md button')])[10]"));
		act.scrollToElement(nextstep1_Again_Again).build().perform();
		nextstep1_Again_Again.click();
		Thread.sleep(1000);
		WebElement nextstep2_Again=driver.findElement(By.xpath("(//ion-col/ion-button[starts-with(@class, 'md button')])[17]"));
		act.scrollToElement(nextstep2_Again).build().perform();
		nextstep2_Again.click();
		WebElement nextstep3_Again=wait.until(ExpectedConditions.elementToBeClickable(By.xpath("(//ion-row[@class='hidden-sm-down md hydrated']/ion-col/ion-button[starts-with(@class, 'md button')])[10]")));
		nextstep3_Again.click();
		WebElement nextstep4_Again= driver.findElement(By.xpath("(//ion-row[@style='padding-left: 50px;']/ion-col[@class='md hydrated']/ion-button[starts-with(@class, md)])[5]"));
		act.scrollToElement(nextstep4_Again).build().perform();
		nextstep4_Again.click();
		WebElement nextstep5_Again=driver.findElement(By.xpath("(//ion-row[@style='padding-left: 50px;']/ion-col[@class='md hydrated']/ion-button[starts-with(@class, md)])[6]"));
		nextstep5_Again.click();
		WebElement nextstep7_Again = driver.findElement(By.xpath("(//ion-row[@style='padding-left: 50px;']/ion-col[@class='md hydrated']/ion-button)[7]"));
		Thread.sleep(1000);
		nextstep7_Again.click();
//		*******************end of the flow***************************************
		// Step 7 Remarks
//		WebElement nextstep7 = driver.findElement(By.xpath("(//ion-row[@style='padding-left: 50px;']/ion-col[@class='md hydrated']/ion-button)[6]"));
		Thread.sleep(1000);
//		nextstep7.click();
		// Step 8 Signature and Discloser
		WebElement nextstep8=driver.findElement(By.xpath("(//ion-row[@style='padding-left: 50px;']/ion-col[@class='md hydrated']/ion-button)[8]"));
		act.moveToElement(nextstep8).build().perform();
//		nextstep8.click();
		WebElement signedCity =driver.findElement(By.xpath("//ion-input[@formcontrolname='SignedCity']/input"));
		act.moveToElement(signedCity).build().perform();
		WebElement HoldDateRadioButton_No=driver.findElement(By.xpath("//ion-radio-group[@formcontrolname='HoldDateCheckBox']/ion-row/ion-col[2]/ion-item"));
		WebElement Error_SignedCity=driver.findElement(By.xpath("(//ion-col[@class = 'md hydrated' and @size-md = '12' and @size='24'])[4]"));
		act.scrollToElement(Error_SignedCity).build().perform();
		Assert.assertTrue(Error_SignedCity.isDisplayed());
		String LabelErrorSignedCity_Text=Error_SignedCity.getText();
		System.out.println(LabelErrorSignedCity_Text);
		Thread.sleep(1000);
		signedCity.sendKeys("ggdssadfkjgfhfsahklklasfkhalkfhlkasfhlkasfhlkafhlkasfhlkasfhlkasfh");
		act.scrollToElement(Error_SignedCity).build().perform();
		Assert.assertTrue(Error_SignedCity.isDisplayed());
		String LabelError_MaximumSignedCity_Text=Error_SignedCity.getText();
		System.out.println(LabelError_MaximumSignedCity_Text);
		signedCity.clear();
		signedCity.sendKeys("Testing Codetru");
		WebElement Error_SignatureProposedInsurer=driver.findElement(By.xpath("(//h3[text()='Signature']/following-sibling::ion-row[2]/ion-col[@size='24' and @size-md='6'])[1]"));
		act.scrollToElement(Error_SignatureProposedInsurer).build().perform();
		act.scrollToElement(HoldDateRadioButton_No).build().perform();
		Assert.assertTrue(Error_SignatureProposedInsurer.isDisplayed());
		String LabelErrorSignatureProposedInsurer_Text=Error_SignatureProposedInsurer.getText();
		System.out.println(LabelErrorSignatureProposedInsurer_Text);
		WebElement ProposedInsurerSignature=driver.findElement(By.xpath("//h3[.='Signature']/following-sibling::ion-row[2]/ion-col/div/ion-button"));
		ProposedInsurerSignature.click();
		WebElement	signature_pad1= driver.findElement(By.xpath("(//canvas[@class='signature-pad-canvas hidden-xs-down'])[1]"));
		Thread.sleep(1000);
		act.clickAndHold(signature_pad1)
		.moveByOffset(25, 25)
		.moveByOffset(35, 30)
		.moveByOffset(16, 26)
		.moveByOffset(-76, -26)
		.moveByOffset(18, 56)
		.moveByOffset(-52, -36)
		.moveByOffset(-21,-25)
		.moveByOffset(36, 26)
		.moveByOffset(-54, 56)
		.release()
		.build()
		.perform();
		driver.findElement(By.xpath("(//ion-col[@style='padding-right: 20px;']/ion-button)[1]")).click();
		WebElement Error_HoldUntillDate=driver.findElement(By.xpath("(//ion-col[@class = 'md hydrated' and @size-md = '12' and @size='24'])[6]"));
		act.scrollToElement(Error_HoldUntillDate).build().perform();
		Assert.assertTrue(Error_HoldUntillDate.isDisplayed());
		String LabelErrorHoldUntillDate_Text=Error_HoldUntillDate.getText();
		System.out.println(LabelErrorHoldUntillDate_Text);
		HoldDateRadioButton_No.click();
		act.scrollToElement(nextstep8).build().perform();
		WebElement Error_SignatureOfAgent=driver.findElement(By.xpath("//h3[text()='Agent']/following-sibling::ion-row/ion-col[4][@size='24']"));
		Assert.assertTrue(Error_SignatureOfAgent.isDisplayed());
		String LabelErrorSignatuerOfAgent_Text=Error_SignatureOfAgent.getText();
		System.out.println(LabelErrorSignatuerOfAgent_Text);
		Thread.sleep(1000);
		WebElement SignatureOfAgent=driver.findElement(By.xpath("//div/h3[.='Agent']/following-sibling::ion-row/ion-col[4]/div/ion-button"));
		SignatureOfAgent.click();
		WebElement signature_pad2=driver.findElement(By.xpath("//canvas[@class='signature-pad-canvas hidden-xs-down']"));
		Thread.sleep(1000);
		act.clickAndHold(signature_pad2)
		.moveByOffset(25, 25)
		.moveByOffset(35, 30)
		.moveByOffset(16, 26)
		.moveByOffset(-76, -26)
		.moveByOffset(18, 56)
		.moveByOffset(-52, -36)
		.moveByOffset(-21,-25)
		.moveByOffset(36, 26)
		.moveByOffset(112, 56)
		.release()
		.build()
		.perform();
		driver.findElement(By.xpath("(//ion-col[@style='padding-right: 20px;']/ion-button)[1]")).click();
		Thread.sleep(1000);
		nextstep8.click();
	
		Thread.sleep(1000);
//		WebElement Step_8=driver.findElement(By.xpath("//span[text()='Step 8: Upload Application ']"));
		Thread.sleep(1000);
//		Step_8.click();
		Thread.sleep(1000);
		driver.manage().deleteAllCookies();
		// Clicking Again on List and then Edit and Submitting again.

				WebElement MakePayment_Step_9=driver.findElement(By.xpath("//span[text()='Step 9: Make a Payment']"));
				Thread.sleep(1000);
				MakePayment_Step_9.click();
				Thread.sleep(1000);
				WebElement nextButton =wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//ion-button[normalize-space()='Next']")));
				Thread.sleep(1000);
				nextButton.click();
				wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("(//ion-content[contains(@class, ion-padding)])[6]"))).click();
				WebElement	nxtBtn= driver.findElement(By.xpath("(//ion-col/ion-button[@size='small' and @color='primary'])[1]"));
				act.scrollToElement(nxtBtn).build().perform();
				WebElement Disclaimeryes=driver.findElement(By.xpath("//ion-checkbox[@formcontrolname='disclaimerYes']"));
				Disclaimeryes.click();
				nxtBtn	.click();
				WebElement Error_PolicyPayment_Relationship =driver.findElement(By.xpath("//ion-label[.=' Relationship']/parent::ion-item/following-sibling::div[.=' Please enter a value. ']"));
				Assert.assertTrue(Error_PolicyPayment_Relationship.isDisplayed());
				String LabelErrorPolicyPayment_RelationText=Error_PolicyPayment_Relationship.getText();
				System.out.println("Relationship "+LabelErrorPolicyPayment_RelationText);
				WebElement ErrorMessage_PolicyPayment_PaymentType =driver.findElement(By.xpath("(//ion-col[@size='24' and @size-md='8' and @class='md hydrated'])[5]"));
				Assert.assertTrue(ErrorMessage_PolicyPayment_PaymentType.isDisplayed());
				String LabelError_PaymentTypeText=ErrorMessage_PolicyPayment_PaymentType.getText();
				System.out.println("Payment Type "+LabelError_PaymentTypeText);
				WebElement	RelationShipDropDown= driver.findElement(By.xpath("//select[@formcontrolname='Relationship']"));
				RelationShipDropDown.click();
				driver.findElement(By.xpath("//option[.='Parent ']")).click();
				WebElement	PaymentType= driver.findElement(By.xpath("//select[@formcontrolname='PaymentType']"));
				PaymentType.click();
				driver.findElement(By.xpath("//option[.='Premium']")).click();
				Thread.sleep(1000);
				nextButton.click();
				WebElement	nxtBtn1= driver.findElement(By.xpath("(//ion-col/ion-button[@size='small' and @color='primary'])[1]"));
				act.scrollToElement(nxtBtn1).build().perform();
				WebElement Disclaimeryes1	=driver.findElement(By.xpath("//ion-checkbox[@formcontrolname='disclaimerYes']"));
				Disclaimeryes1.click();
				nxtBtn1.click();
				Thread.sleep(2000);
				WebElement NextBtn_BillingPage =driver.findElement(By.xpath("//ion-button[@color='primary' and @size-md='8']"));
				act.scrollToElement(NextBtn_BillingPage).build().perform();
				NextBtn_BillingPage.click();
				WebElement Error_FormOfPayment =driver.findElement(By.xpath("(//h3[.='Payment Preferences']/following-sibling::ion-row/ion-col[@size='24'])[1]"));
				act.scrollToElement(Error_FormOfPayment).build().perform();
				Assert.assertTrue(Error_FormOfPayment.isDisplayed());
				String LabelError_FormOfPayment=Error_FormOfPayment.getText();
				System.out.println(LabelError_FormOfPayment);
				WebElement CreditCard =driver.findElement(By.xpath("(//ion-radio[@slot='start' and @aria-checked='false'])[1]"));
				CreditCard.click();
				WebElement Error_ReccuringPayemtns =driver.findElement(By.xpath("(//h3[.='Payment Preferences']/following-sibling::ion-row/ion-col[@size='24'])[2]"));
				act.scrollToElement(Error_ReccuringPayemtns).build().perform();
				Assert.assertTrue(Error_ReccuringPayemtns.isDisplayed());
				String LabelError_ReccuringPayments=Error_ReccuringPayemtns.getText();
				System.out.println(LabelError_ReccuringPayments);
				WebElement Reccuring_CheckBox =driver.findElement(By.xpath("//ion-checkbox[@role='checkbox']"));
				Reccuring_CheckBox.click();
				WebElement Error_BillignFirstName=driver.findElement(By.xpath("(//h3[.='Billing Information']/following-sibling::ion-row/ion-col[@size='24' and @size-md='12'])[1]"));
				act.scrollToElement(Error_BillignFirstName).build().perform();
				Assert.assertTrue(Error_BillignFirstName.isDisplayed());
				String LabelError_BillignFirstName=Error_BillignFirstName.getText();
				System.out.println(LabelError_BillignFirstName);
				WebElement BillingFirstName =driver.findElement(By.xpath("//ion-input[@formcontrolname='CardHolderFirstName']/input"));
				BillingFirstName.sendKeys("dsfdsafgdsafgdsfg");
				act.scrollToElement(Error_BillignFirstName).build().perform();
				Assert.assertTrue(Error_BillignFirstName.isDisplayed());
				String LabelErrorMaximum_BillignFirstName=Error_BillignFirstName.getText();
				System.out.println(LabelErrorMaximum_BillignFirstName);
				BillingFirstName.clear();
				BillingFirstName.sendKeys("Testing Payment");
				WebElement Error_BillignLastName=driver.findElement(By.xpath("(//h3[.='Billing Information']/following-sibling::ion-row/ion-col[@size='24' and @size-md='12'])[2]"));
				act.scrollToElement(Error_BillignLastName).build().perform();
				Assert.assertTrue(Error_BillignLastName.isDisplayed());
				String LabelError_BillignLastName=Error_BillignLastName.getText();
				System.out.println(LabelError_BillignLastName);
				WebElement BillingLastName =driver.findElement(By.xpath("//ion-input[@formcontrolname='CardHolderLastName']/input"));
				BillingLastName.sendKeys("PaymentasdfgaedfsdfgwSEDFGASDFGBASDFGBASDFGASDFGBASDFGSADF1234sdfsghdsfghjdfgh2345");
				WebElement billingZipCode =driver.findElement(By.xpath("//ion-input[@formcontrolname='Zip']/input"));
				act.scrollToElement(billingZipCode).build().perform();
				act.scrollToElement(Error_BillignLastName).build().perform();
				Assert.assertTrue(Error_BillignLastName.isDisplayed());
				String LabelErrorMaximum_BillignLastName=Error_BillignLastName.getText();
				System.out.println(LabelErrorMaximum_BillignLastName);
				Thread.sleep(1000);
				BillingLastName.clear();
				BillingLastName.sendKeys("Testing Payment lastname");
				WebElement Error_BillignStreetAddress=driver.findElement(By.xpath("(//h3[.='Billing Information']/following-sibling::ion-row/ion-col[@size='24' and @class='md hydrated'])[3]"));
				act.scrollToElement(Error_BillignStreetAddress).build().perform();
				Assert.assertTrue(Error_BillignStreetAddress.isDisplayed());
				String LabelError_BillignStreetAddress=Error_BillignStreetAddress.getText();
				System.out.println(LabelError_BillignStreetAddress);
				WebElement billingStreetAddress =driver.findElement(By.xpath("//ion-input[@formcontrolname='StreetAddress']/input"));
				billingStreetAddress.sendKeys("sadfgsadfgsadfghasfgasdfghsadfgasdfghsadfghsdafghjasdfgn");
				Thread.sleep(1000);
				Assert.assertTrue(Error_BillignStreetAddress.isDisplayed());
				String LabelError_MaximumBillignStreetAddress=Error_BillignStreetAddress.getText();
				System.out.println(LabelError_MaximumBillignStreetAddress);
				billingStreetAddress.clear();
				billingStreetAddress.sendKeys("Austin, texas USA");
				WebElement Error_BillignCityAndRegion=driver.findElement(By.xpath("(//h3[.='Billing Information']/following-sibling::ion-row/ion-col[@size='24' and @class='md hydrated'])[4]"));
				act.scrollToElement(Error_BillignCityAndRegion).build().perform();
				Assert.assertTrue(Error_BillignCityAndRegion.isDisplayed());
				String LabelError_BillignCityAndRegion=Error_BillignCityAndRegion.getText();
				System.out.println(LabelError_BillignCityAndRegion);
				WebElement billingCityAndRegion =driver.findElement(By.xpath("//ion-input[@formcontrolname='City']/input"));
				billingCityAndRegion.sendKeys("asdasdfsadfvgbasdfgadgfsDAFGDDSZFGHDFXHGJKSAERDTFGHJ");
				Assert.assertTrue(Error_BillignCityAndRegion.isDisplayed());
				String LabelErrorMaximum_BillignCityAndRegion=Error_BillignCityAndRegion.getText();
				System.out.println(LabelErrorMaximum_BillignCityAndRegion);
				billingCityAndRegion.clear();
				billingCityAndRegion.sendKeys("Dallas");
				WebElement Error_BillignState=driver.findElement(By.xpath("(//h3[.='Billing Information']/following-sibling::ion-row/ion-col[@size='24' and @class='md hydrated'])[5]"));
				act.scrollToElement(Error_BillignState).build().perform();
				Assert.assertTrue(Error_BillignState.isDisplayed());
				String LabelError_BillignState=Error_BillignState.getText();
				System.out.println(LabelError_BillignState);
				WebElement billingState =driver.findElement(By.xpath("//select[@formcontrolname='State']"));
				billingState.click();
				WebElement StateSelection =driver.findElement(By.xpath("//option[.=' Arkansas']"));
				StateSelection.click();
				WebElement Error_BillignZipCode=driver.findElement(By.xpath("(//h3[.='Billing Information']/following-sibling::ion-row/ion-col[@size='24' and @class='md hydrated'])[6]"));
				act.scrollToElement(Error_BillignZipCode).build().perform();
				Assert.assertTrue(Error_BillignZipCode.isDisplayed());
				String LabelError_BillignZipCode=Error_BillignZipCode.getText();
				System.out.println(LabelError_BillignZipCode);
				billingZipCode.sendKeys("asdfasd");
				act.scrollToElement(Error_BillignZipCode).build().perform();
				Assert.assertTrue(Error_BillignZipCode.isDisplayed());
				String LabelErrorNumberFormat_BillignZipCode=Error_BillignZipCode.getText();
				System.out.println(LabelErrorNumberFormat_BillignZipCode);
				billingZipCode.clear();
				billingZipCode.sendKeys("1234");
				Assert.assertTrue(Error_BillignZipCode.isDisplayed());
				String LabelErrorMinimumCharacter_BillignZipCode=Error_BillignZipCode.getText();
				System.out.println(LabelErrorMinimumCharacter_BillignZipCode);
				billingZipCode.clear();
				billingZipCode.sendKeys("5478415114155211");
				Assert.assertTrue(Error_BillignZipCode.isDisplayed());
				String LabelErrorMaximumCharacter_BillignZipCode=Error_BillignZipCode.getText();
				System.out.println(LabelErrorMaximumCharacter_BillignZipCode);
				Thread.sleep(1000);
				billingZipCode.clear();
				billingZipCode.sendKeys("67801");
				WebElement Error_BillignCountry=driver.findElement(By.xpath("(//h3[.='Billing Information']/following-sibling::ion-row/ion-col[@size='24' and @class='md hydrated'])[7]"));
				act.scrollToElement(Error_BillignCountry).build().perform();
				Assert.assertTrue(Error_BillignCountry.isDisplayed());
				String LabelError_BillignCountry=Error_BillignCountry.getText();
				System.out.println(LabelError_BillignCountry);
				WebElement billingCountry =driver.findElement(By.xpath("//select[@formcontrolname='Country']"));
				billingCountry.click();
				WebElement billingCountrySelection =driver.findElement(By.xpath("//option[.=' COLOMBIA']"));
				billingCountrySelection.click();
				act.scrollToElement(NextBtn_BillingPage).build().perform();
				WebElement Error_BillignPhoneNumber=driver.findElement(By.xpath("(//h3[.='Billing Information']/following-sibling::ion-row/ion-col[@size='24' and @class='md hydrated'])[8]"));
				act.scrollToElement(Error_BillignPhoneNumber).build().perform();
				Assert.assertTrue(Error_BillignPhoneNumber.isDisplayed());
				String LabelError_BillignPhoneNumber=Error_BillignPhoneNumber.getText();
				System.out.println(LabelError_BillignPhoneNumber);
				WebElement BillingPhoneNumber =driver.findElement(By.xpath("//ion-input[@formcontrolname='Phone']/input"));
				BillingPhoneNumber.sendKeys("sadfasdd");
				Assert.assertTrue(Error_BillignPhoneNumber.isDisplayed());
				String LabelErrorNumberFormat_BillignPhoneNumber=Error_BillignPhoneNumber.getText();
				System.out.println(LabelErrorNumberFormat_BillignPhoneNumber);
				BillingPhoneNumber.clear();
				BillingPhoneNumber.sendKeys("1254812");
				Assert.assertTrue(Error_BillignPhoneNumber.isDisplayed());
				String LabelErrorMinimum_BillignPhoneNumber=Error_BillignPhoneNumber.getText();
				System.out.println(LabelErrorMinimum_BillignPhoneNumber);
				BillingPhoneNumber.clear();
				BillingPhoneNumber.sendKeys("125481212512");
				Assert.assertTrue(Error_BillignPhoneNumber.isDisplayed());
				String LabelErrorMaximum_BillignPhoneNumber=Error_BillignPhoneNumber.getText();
				System.out.println(LabelErrorMaximum_BillignPhoneNumber);
				BillingPhoneNumber.clear();
				BillingPhoneNumber.sendKeys("1254812123");
				WebElement Error_BillignEmailAddress=driver.findElement(By.xpath("(//h3[.='Billing Information']/following-sibling::ion-row/ion-col[@size='24' and @class='md hydrated'])[9]"));
				act.scrollToElement(Error_BillignEmailAddress).build().perform();
				Assert.assertTrue(Error_BillignEmailAddress.isDisplayed());
				String LabelError_BillignEmailAddress=Error_BillignEmailAddress.getText();
				System.out.println(LabelError_BillignEmailAddress);
				WebElement BillingEmailAddress =driver.findElement(By.xpath("//ion-input[@formcontrolname='Email']/input"));
				BillingEmailAddress.sendKeys("asas");
				Assert.assertTrue(Error_BillignEmailAddress.isDisplayed());
				String LabelErrorCorrectFormat_BillignEmailAddress=Error_BillignEmailAddress.getText();
				System.out.println(LabelErrorCorrectFormat_BillignEmailAddress);
				BillingEmailAddress.clear();
				BillingEmailAddress.sendKeys("sdasdfgasdfaSdfgasdfbsDfgasdfgnasdfgsdfgsdzfghdfsgdhfjgfdg");
				Assert.assertTrue(Error_BillignEmailAddress.isDisplayed());
				String LabelErrorMaximumCharacters_BillignEmailAddress=Error_BillignEmailAddress.getText();
				System.out.println(LabelErrorMaximumCharacters_BillignEmailAddress);
				BillingEmailAddress.clear();
				BillingEmailAddress.sendKeys("none@none.com");
				NextBtn_BillingPage.click();
				Thread.sleep(3000);

	}

}


